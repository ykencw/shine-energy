{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInput","event","target","value","reading","name","setState","prevState","defineProperty","prev","current","used","bill","state","gas","elec","_this2","fetch","headers","x-requested-with","origin","then","res","json","console","log","entries","objectSpread","electricity","catch","err","_this3","react_default","a","createElement","className","format","htmlFor","type","max","onChange","e","id","React","Component","number","commaDelimit","string","toString","includes","split","reduce","whole","fraction","reverse","map","char","index","join","concat","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5957a8dd.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.scss';\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      gas: {\r\n        prev: 11000, current: 0, used: 0, bill: 0,\r\n      },\r\n      elec: {\r\n        prev: 11000, current: 0, used: 0, bill: 0,\r\n      }\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(`https://cors-anywhere.herokuapp.com/shine-energy.netlify.com/.netlify/functions/meter-readings`, {\r\n      headers: {\r\n        \"x-requested-with\": \"XMLHttpRequest\",\r\n        \"origin\": \"https://google.com\"\r\n\r\n      }\r\n    },\r\n    )\r\n      .then(res => {\r\n        return res.json();\r\n      })\r\n      .then(res => {\r\n        console.log('This is our response  ' + Object.entries(res));\r\n        this.setState(prevState => ({\r\n          gas: {\r\n            ...(prevState.gas),\r\n            prev: res.gas.reading\r\n          },\r\n          elec: {\r\n            ...(prevState.elec),\r\n            prev: res.electricity.reading\r\n          },\r\n\r\n        }))\r\n      }).catch(err => {\r\n        console.log(\"Our fetch request is failing, error: \" + err);\r\n      });\r\n  }\r\n\r\n  handleInput = event => {\r\n    if (event.target.value >= 1000000000) {\r\n      event.target.value = 999999999;\r\n    } else if (event.target.value <= -1000000000) {\r\n      event.target.value = -999999999;\r\n    }\r\n    const reading = event.target.value;\r\n    const name = event.target.name;\r\n    this.setState(prevState => ({\r\n      [name]: {\r\n        prev: prevState[name].prev,\r\n        current: reading,\r\n        used: reading - prevState[name].prev,\r\n        bill: (100 * 10) + ((reading - prevState[name].prev - 100) * 20)\r\n      }\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1 className='title'>SHINE ENERGY</h1>\r\n        <h2 className='subtitle'>Your Account Summary</h2>\r\n        <div className='container container1'>\r\n          <div className='item'>\r\n            Total Bill: <span>{format(this.state.gas.bill + this.state.elec.bill)}\r\n            p (£{format((this.state.gas.bill + this.state.elec.bill) / 100)})</span>\r\n          </div>\r\n        </div>\r\n        <div className='container container2'>\r\n          <div className='item'>\r\n            <label htmlFor='gas'>Gas Reading:</label>\r\n            <input type='number' max=\"999\" name='gas' \r\n              onChange={e => this.handleInput(e)} /></div>\r\n          <div className='item'>Gas Reading Entered:\r\n            <span>{format(this.state.gas.current)}</span></div>\r\n          <div className='item'>Gas units used =>\r\n\r\n            <div className='used'>\r\n              Current:\r\n            <span>{format(this.state.gas.current)}</span>\r\n              <br />\r\n              previous:\r\n            <span>{format(this.state.gas.prev)}</span> <br />Used:\r\n            <span>{format(this.state.gas.used)}</span>\r\n            </div>\r\n\r\n          </div>\r\n          <div className='item'>Gas bill amount =>\r\n            <span>{format(this.state.gas.bill)}</span>p (£\r\n            <span id='pound'>{format(this.state.gas.bill / 100)}</span>)\r\n          </div>\r\n        </div>\r\n\r\n        <div className='container'>\r\n          <div className='item'>\r\n            <label htmlFor='elec'>Electricity Reading:</label>\r\n            <input type='number' max=\"999\" name='elec' \r\n              onChange={e => this.handleInput(e)} />\r\n          </div>\r\n          <div className='item'>Electricty Reading Entered: <span>{format(this.state.elec.current)}</span></div>\r\n          <div className='item'>Electricty units used =>\r\n\r\n          <div className='used'>\r\n              Current:\r\n            <span>{format(this.state.elec.current)}</span>\r\n              <br />\r\n              previous:\r\n              <span>{format(this.state.elec.prev)}</span> => <br />Used:\r\n              <span>{format(this.state.elec.used)}</span>\r\n            </div>\r\n          </div>\r\n\r\n          <div className='item'>Electricty bill amount =>\r\n            <span>{format(this.state.elec.bill)}</span>p (£\r\n            <span id='pound'>{format(this.state.elec.bill / 100)}</span>)\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst format = number => {\r\n  return number == 0 ? 0 : commaDelimit(number)\r\n}\r\n\r\nconst commaDelimit = number => {\r\n  let string = number.toString();\r\n  return !string.includes('.') ? string\r\n    .split('')\r\n    .reverse()\r\n    .map((char, index) => {\r\n      return index % 3 == 0 && index != 0 && char != '-' ? char + ',' : char\r\n    }).reverse().join('') :\r\n    string\r\n      .split('.').reduce((whole, fraction) => {\r\n        console.log(\"Whole \" + whole + \" fraction \" + fraction);\r\n        return whole.split('')\r\n          .reverse()\r\n          .map((char, index) => {\r\n            return index % 3 == 0 && index != 0 && char != '-' ? char + ',' : char\r\n          }).reverse().join('').concat('.' + fraction);\r\n      });\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}